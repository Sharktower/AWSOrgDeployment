# https://github.com/tradichel/SecurityMetricsAutomation
# KMS/stacks/Key/cfn/Key.yaml
# author: @teriradichel @2ndsightlab
##############################################################
Parameters:
  EncryptArnParam:
    Type: CommaDelimitedList
  DecryptArnParam:
    Type: CommaDelimitedList
  KeyAliasParam:
    Type: String
  RotateParam:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  DescParam:
    Type: String
  TimestampParam:
    Type: String
    Description: Force an update since AWS overwrites roles and CF doesn't recognize the change
  ServiceParam:
    Type: String
    AllowedValues:
      - "secretsmanager"
      - "parameterstore"
      - "kms"

Conditions:
  ServiceIsSecretsManager:
    !Equals [!Ref ServiceParam, "secretsmanager"]

Resources:
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Ref DescParam
      EnableKeyRotation: !Ref RotateParam
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: "Allow Administration of the key and force update"
            Effect: Allow
            Principal:
              AWS:
                - !ImportValue KMSAdminsRoleArnExport
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: "*"
          - Sid: Describe Key Only
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:DescribeKey
            Resource: "*"
          - Sid: Get key policy
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:GetKeyPolicy
            Resource: "*"
          - Sid: "Encrypt which apparently requires decrypt permissions"
            Effect: Allow
            Principal:
              AWS:
                !Ref EncryptArnParam
            Action:
              - 'kms:Encrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
              - 'kms:Decrypt'
              - 'kms:DescribeKey'
                 
              #for ec2 instances
              - 'kms:CreateGrant'
            Resource: "*"
          - Sid: Decrypt
            Effect: Allow
            Principal:
              AWS:
                !Ref DecryptArnParam
            Action:
              - 'kms:Decrypt'
              - 'kms:DescribeKey'
            Condition:
              !If
                - ServiceIsSecretsManager
                - 
                  "StringEquals":
                    "kms:ViaService":
                      - !Sub "secretsmanager.${AWS::Region}.amazonaws.com"
                - 
                  "StringEquals":
                    "eventSource": 
                      "kms.amazonaws.com"
            Resource: "*"

Outputs:
  KeyIDOutput:
    Value: !GetAtt KMSKey.KeyId
    Export:
      Name: !Sub ${KeyAliasParam}KeyIDExport
  KeyArnOutput:
    Value: !GetAtt KMSKey.Arn
    Export:
     Name: !Sub ${KeyAliasParam}KeyArnExport
  ForceUpdate:
    Value: !Sub "${TimestampParam}"
